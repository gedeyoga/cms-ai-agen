datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Contact {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  name      String?
  status    Status   @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories    ContactCategory[]
  chatHistories ChatHistory[]

  @@map("contact")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contacts ContactCategory[]

  @@map("category")
}

model ContactCategory {
  id         Int @id @default(autoincrement())
  contactId  Int
  categoryId Int

  contact  Contact  @relation(fields: [contactId], references: [id], map: "fk_contactcategory_contact", onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], map: "fk_contactcategory_category", onDelete: Cascade)

  @@index([contactId, categoryId])
  @@map("contactcategory")
}

enum Status {
  NEW
  HOT
  WARM
  COLD
  FOLLOWUP
  LOST
  ACTIVE
}

model ChatHistory {
  id        Int       @id @default(autoincrement())
  contactId Int
  role      String
  content   String?   @db.Text
  readedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("chathistory")
}

model User {
  id        String   @id @default(uuid()) // Gunakan UUID sebagai primary key
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userOtps UserOtp[]
}

model UserOtp {
  id        String   @id @default(uuid())
  userId    String
  otp       String
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userotp")
}
